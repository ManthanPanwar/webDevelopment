var x = 1;
a();
b(); // we are calling the functions before defining them. This will work properly, as seen in Hoisting.
console.log(x);

function a() {
 var x = 10; // local scope because of separate execution context
 console.log(x);
}
function b() {
 var x = 100; // local scope because of separate execution context
 console.log(x);
}


output of above code
{
  10
  100
  1
}

callStack changes
{
  1. GEC
  2. [GEC, a()] 
  3. GEC
  4. [GEC, b()]
  5. [GEC]
  6. empty
}

steps
{
  In first phase of GEC (memory phase), variable x:undefined and a and b have their entire function code as value initialized.
  In second phase of GEC (execution phase), when the function is called, a new local Execution Context is created.
  After x = 1 assigned to GEC x, a() is called. So local EC for a is made inside code part of GEC.

  For local EC, a totally different x variable assigned undefined(x inside a()) in phase 1 , and in phase 2 it is assigned
  10 and printed in console log. After printing, no more commands to run, so a() local EC is removed from both GEC
  and from Call stack

  Cursor goes back to b() function call. Same steps repeat

  Finally GEC is deleted and also removed from call stack. Program ends.
}